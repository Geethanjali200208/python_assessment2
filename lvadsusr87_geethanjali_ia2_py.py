# -*- coding: utf-8 -*-
"""LVADSUSR87-geethanjali-IA2.py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RWoGXMVYGYvUulZrO8Y97KB43Z2tSJQ-
"""

#1
import numpy as np

def rgb_to_grayscale(image):

  luminosity_weights = np.array([0.2989, 0.5870, 0.1140])

  pixels = image.reshape((image.size // image.shape[2],image.shape[2]))

  grayscale_values = np.dot(pixels, luminosity_weights)
  grayscale_image = grayscale_values.reshape(image.shape[0],image.shape[1])

  return grayscale_image
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])

image = rgb_to_grayscale(rgb_image)
print(image)

#2
import numpy as np

def n_data(data):
  n_data = data - np.mean(data, axis=0)
  n_data = n_data / np.std(data, axis=0)

  return n_data

data = np.array([[100, 70, 70],
                  [170, 60, 66],
                  [630, 90, 99]])

n_data = n_data(data)

print(n_data)

#3
import numpy as np
sensor_data = np.array([
    [[1, 2, 3],
     [4, 5, 6]],
    [[7, 8, 9],
     [10, 11, 12]]])
print(sensor_data.shape)
flat_data = sensor_data.reshape(sensor_data.shape[1], -1)
print(flat_data)
reshape_data = flat_data.reshape(-1, flat_data.shape[1] // sensor_data.shape[2])
print(reshape_data)

#4
import pandas as pd
data = pd.read_csv('/content/your_data.csv')
games_data = data.to_numpy()
first_game_scores = games_data[:, 0]
last_game_scores = games_data[:, -1]
improvement = last_game_scores - first_game_scores
print(improvement)
improvement_df = data[['Athlete Name', data.columns[-1]] - data[['Athlete Name', data.columns[1]]]]
print(improvement_df)

#5
import numpy as np

def calculate_average_score(scores):
  num_students, num_subjects = scores.shape
  if num_subjects < 3:
    print("Input array must have at least 3 subjects")
  last_three = slice(-3, None)
  filtered_scores = np.where(scores == -1, np.nan, scores)
  average_scores = np.nanmean(filtered_scores[:, last_three], axis=1)
  return average_scores
scores = np.array([
    [85, 90, 78, -1, 92],
    [60, 75, 80, 88, 95],
    [53, 48, 91, 67, 72],
])
average_scores = calculate_average_score(scores)
print(average_scores)

#6
import numpy as np

def adjust_temp(temp, arr):

  return temp + arr[:, np.newaxis]

temp = np.array([
  [10.5, 12.3, 14.7, 15.9, 17.8, 18.9, 20.3, 19.7, 17.2, 14.1, 11.3, 9.4],
  [12.1, 13.8, 15.9, 17.5, 19.1, 20.4, 21.8, 21.1, 18.6, 15.4, 12.7, 10.9],
])

arr = np.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3])
arr = arr.reshape(1,12)
adjusted_temp = adjust_temp(temp, arr)
print(adjusted_temp)

#7
import pandas as pd
data = {
    'Name': ['alice', 'bob', 'charlie', 'david', 'eve', 'frank', 'grace'],
    'age': [25, 30, 35, 40, 45, 50, 55],
    'city': ['newyork', 'losangels', 'chicago', 'houston', 'phoenix', 'miami', 'boston'],
    'department': ['hr', 'it', 'finance', 'marketing', 'sales', 'it', 'hr']
}
df = pd.DataFrame(data)
#print(df)
ans = df[(df['age'] > 45) & (df['department'] == 'hr')]
print(ans)

#8
import pandas as pd
data = {
    "Product": ["Apples", "Bananas", "Cherries", "Dates", "Elderberries", "Flour", "Grapes"],
    "Category": ["Fruit", "Fruit", "Fruit", "Fruit", "Fruit", "Bakery", "Fruit"],
    "Price": [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    "Promotion": [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
products = df[(df["Category"] == "Fruit") & (df["Price"] > df["Price"].mean()) & (~df["Promotion"])]
promotions = products["Product"].tolist()
print(promotions)

#9
import pandas as pd
employee = pd.DataFrame({
    "Employee": ["Alice", "Bob", "Charlie", "David", "Eve"],
    "Department": ["HR", "IT", "Finance", "IT", "Marketing"],
    "Manager": ["John", "Rachel", "Emily", "Rachel", "Mike"]})

project = pd.DataFrame({
    "Employee": ["Alice", "Charlie", "Eve", "David"],
    "Project": ["P1", "P3", "P2", "P4"]})
df = pd.merge(employee, project, on='Employee')
print(df[['Project', 'Department', 'Manager']])

#10
data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
        'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
        'Sales': [70000, 50000, 30000, 40000, 60000]}
df = pd.DataFrame(data)
avg_sales = df.groupby('Department')['Sales'].mean()
print(avg_sales)